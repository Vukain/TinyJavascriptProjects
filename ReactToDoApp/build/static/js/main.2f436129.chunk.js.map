{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleData","e","setState","target","value","handleText","handleChecked","handleClick","length","props","add","alert","maxDate","this","className","type","placeholder","onChange","htmlFor","min","max","onClick","Component","Task","task","id","active","important","finishedDate","style","color","change","delete","finished","toLocaleString","TaskList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","fontSize","App","counter","deleteTask","changeTaskStatus","forEach","getTime","console","log","addTask","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f436129.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css'\r\n\r\nclass AddTask extends Component {\r\n    minDate = new Date().toISOString().slice(0, 10)\r\n\r\n    state = {\r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n    }\r\n    handleData = (e) => {\r\n        this.setState({\r\n            date: e.target.value\r\n        })\r\n    }\r\n\r\n    handleText = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleChecked = (e) => {\r\n        this.setState({\r\n            checked: e.target.checked\r\n        })\r\n    }\r\n\r\n    handleClick = () => {\r\n\r\n        const { text, date, checked } = this.state;\r\n        if (text.length > 2) {\r\n            const add = this.props.add(text, date, checked)\r\n            if (add) {\r\n                this.setState({\r\n                    text: '',\r\n                    checked: false,\r\n                    date: this.minDate\r\n                })\r\n            }\r\n        } else {\r\n            alert(\"Za krótkie zadanie\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const maxDate = this.minDate.slice(0, 4) * 1 + 1 + \"-12-31\"\r\n        return (\r\n            <div className=\"form\">\r\n                <input type=\"text\" placeholder=\"dodaj zadanie\" value={this.state.text} onChange={this.handleText} />\r\n                <input type=\"checkbox\" checked={this.state.checked} onChange={this.handleChecked} />\r\n                <label htmlFor=\"important\">Priorytet </label> <br />\r\n                <label htmlFor=\"date\">Do kiedy zrobić </label>\r\n                <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleData} /> <br />\r\n                <button onClick={this.handleClick}>Dodaj</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\n\r\nconst Task = (props) => {\r\n\r\n    const { text, date, id, active, important, finishedDate } = props.task;\r\n    const style = {\r\n        color: 'red',\r\n    }\r\n\r\n    if (active) {\r\n        return (\r\n            <div>\r\n                <p>\r\n                    <strong style={important ? style : null}>\r\n                        {text} - do <span> {date} </span>\r\n                    </strong>\r\n                    <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n                    <button onClick={() => props.delete(id)}>X</button>\r\n                </p>\r\n            </div>\r\n        );\r\n    } else {\r\n        const finished = new Date(finishedDate).toLocaleString()\r\n        return (\r\n            <div>\r\n                <p>\r\n                    <strong>\r\n                        {text}\r\n                    </strong><em> (zrobic do {date})</em> <br /> - potwierdzenie wykonania <span>{finished} </span>\r\n\r\n                    <button onClick={() => props.delete(id)}>X</button>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task'\r\n\r\n\r\nconst TaskList = (props) => {\r\n\r\n    const active = props.tasks.filter(task => task.active === true)\r\n    const done = props.tasks.filter(task => task.active !== true)\r\n\r\n    if (active.length >= 2) {\r\n        active.sort((a, b) => {\r\n            a = a.text.toLowerCase()\r\n            b = b.text.toLowerCase()\r\n            if (a > b) {\r\n                return 1\r\n            } else if (a < b) {\r\n                return -1\r\n            }\r\n            else return 0\r\n        })\r\n    }\r\n\r\n    if (done.length >= 2) {\r\n        done.sort((a, b) => b.finishedDate - a.finishedDate)\r\n    }\r\n\r\n    const activeTasks = active.map(task => <Task key={task.id}\r\n        task={task} delete={props.delete} change={props.change} />)\r\n\r\n    const doneTasks = done.map(task => <Task key={task.id}\r\n        task={task} delete={props.delete} change={props.change} />)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"active\">\r\n                <h2>Zadania do zrobienia</h2>\r\n                {activeTasks.length > 0 ? activeTasks : <p>brak zadań</p>}\r\n            </div>\r\n            <div className=\"done\">\r\n                <h3>Zadania do zrobienia <em>({done.length})</em></h3>\r\n                {done.length > 5 && <span style={{ fontSize: 10 }}>wyswietlonych jest jedynie 5 ostatnich elementów</span>}\r\n                {doneTasks.slice(0, 5)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList'\n\n\nimport './App.css';\n\nclass App extends Component {\n  counter = 7\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'zagrac wreszcie w wiedzmina 1',\n        date: '2018-04-15',\n        important: true,\n        active: false,\n        finishedDate: new Date('2018-03-15')\n      },\n      {\n        id: 1,\n        text: 'zagrac wreszcie w wiedzmina 2',\n        date: '2018-05-15',\n        important: false,\n        active: false,\n        finishedDate: new Date('2018-04-15')\n      },\n      {\n        id: 2,\n        text: 'zagrac wreszcie w wiedzmina 3',\n        date: '2018-07-16',\n        important: false,\n        active: false,\n        finishedDate: new Date('2018-06-15')\n      },\n      {\n        id: 3,\n        text: 'zagrac wreszcie w wiedzmina 4',\n        date: '2018-02-17',\n        important: true,\n        active: true,\n        finishedDate: null\n      },\n      {\n        id: 4,\n        text: 'zagrac wreszcie w wiedzmina 5',\n        date: '2019-02-15',\n        important: false,\n        active: true,\n        finishedDate: null\n      },\n      {\n        id: 5,\n        text: 'zagrac wreszcie w wiedzmina 6',\n        date: '2020-02-15',\n        important: false,\n        active: true,\n        finishedDate: null\n      }\n    ]\n  }\n  deleteTask = (id) => {\n    let tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1)\n    tasks = tasks.filter(task => task.id !== id)\n\n    this.setState({\n      tasks: tasks\n    })\n  }\n\n  changeTaskStatus = (id) => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishedDate = new Date().getTime()\n      }\n    })\n    console.log(tasks)\n    this.setState({\n      tasks: tasks\n    })\n  }\n  addTask = (text, date, important) => {\n\n    const task = {\n      id: this.counter++,\n      text: text,\n      date: date,\n      important: important,\n      active: true,\n      finishedDate: null\n    }\n    // console.log(task, this.counter)\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n    return true\n  }\n  render() {\n    return (\n      <div className=\"App\">\n       <h1>TODO APP</h1>\n        <AddTask add={this.addTask}/>\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}